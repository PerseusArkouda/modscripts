#!/bin/bash
# # This script will install directly downloaded mods from Steam's workshop to the game.
# # Uses modified code from ark_update.sh: https://github.com/Nexolight/ark_xposed
# # You can either run with arguments: ./modchecker appid modid1,modid2,modid3 (etc...) or by setting up mods.conf.

# If mods.conf doesn't exist, set below the correct paths
# Will be overriden if you setup the mods.conf
# Example: steaminstallation="${HOME}/.steam"
steaminstallation=""
# Example: server=( \
# "${HOME}/server8" \
# "${HOME}/server6" \
# )
server=( \
"" \
)

# ---------- NO NEED TO EDIT BELOW -----------

# Getting the variables from modfunctions
scriptname="Mod Unpacker"
if [ ! -z "$*" ]; then
 if ! grep ^Mod <<<"$*" &>/dev/null; then
  [ -z "$steaminstallation" ] && echo -e "ERROR: steaminstallation variable cannot be empty when script is used independently with arguments!\
  \nOpen $scriptname and set the correct paths at the top of the script. Exiting." && exit 1
  [ -z "$server" ] && echo -e "ERROR: server array variable(s) cannot be empty when script is used independently with arguments!\
  \nOpen $scriptname and set the correct paths at the top of the script. Exiting." && exit 1
 fi
 appid=$(echo "$*" | tr -d '[:alpha:]' | awk '{print $1}')
 modid=( $(echo "$*" | sed "s/$appid //g" | tr -d '[:alpha:]') )
 . $(dirname "$0")/modfunctions "$scriptname" "$appid" "${modid[@]}"
else
 . $(dirname "$0")/modfunctions "$scriptname"
fi

# Starting installation of mods and replacing if already exist
appworkshopdir="${steaminstallation}/SteamApps/workshop/content/${appid}"

function extract_mod {

for s in "${server[@]}"; do
 for i in "${modid[@]}"; do
  modsrcdir="${appworkshopdir}/${i}"
  moddestdir="${s}/ShooterGame/Content/Mods/${i}"
# Uncomment to simulate mod installation to verify your settings.
  #msg="Will install $modsrcdir in $moddestdir. Steam dir: $appworkshopdir" && output_msg
  #exit
  echo
  msg="Preparing to install Mod: $modname" && output_msg
  msg="Installing Mod ID: $i for App ID: $appid in server: ${s}..." && output_msg
  if [ -f "$modsrcdir/mod.info" ]; then
    if [ -f "$modsrcdir/WindowsNoEditor/mod.info" ]; then
     modsrcdir="$modsrcdir/WindowsNoEditor"
    else
     msg="ERROR: $modsrcdir/WindowsNoEditor not found. Possibly corrupted mod download. Try to download again."
     output_msg
    fi

    [ -d "$moddestdir" ] && msg="Found Mod ID: $modid already installed. Reinstalling/Updating..." && output_msg && rm -rf "${moddestdir}*"

    msg="Copying files to $moddestdir..." && output_msg

    find "$modsrcdir" -type d -printf "$moddestdir/%P\0" | xargs -0 -r mkdir -p

    find "$modsrcdir" -type f ! \( -name '*.z' -or -name '*.z.uncompressed_size' \) -printf "%P\n" | while read f; do
      if [ \( ! -f "$moddestdir/$f" \) -o "$modsrcdir/$f" -nt "$moddestdir/$f" ]; then
        printf "%10d  %s  " "`stat -c '%s' "$modsrcdir/$f"`" "$f"
        cp "$modsrcdir/$f" "$moddestdir/$f"
        echo -ne "\r\\033[K"
      fi
    done

    find "$modsrcdir" -type f -name '*.z' -printf "%P\n" | while read f; do
      if [ \( ! -f "$moddestdir/${f%.z}" \) -o "$modsrcdir/$f" -nt "$moddestdir/${f%.z}" ]; then
        printf "%10d  %s  " "`stat -c '%s' "$modsrcdir/$f"`" "${f%.z}"
        perl -M'Compress::Raw::Zlib' -e '
          my $sig;
          read(STDIN, $sig, 8) or die "Unable to read compressed file";
          if ($sig != "\xC1\x83\x2A\x9E\x00\x00\x00\x00"){
            die "Bad file magic";
          }
          my $data;
          read(STDIN, $data, 24) or die "Unable to read compressed file";
          my ($chunksizelo, $chunksizehi,
              $comprtotlo,  $comprtothi,
              $uncomtotlo,  $uncomtothi)  = unpack("(LLLLLL)<", $data);
          my @chunks = ();
          my $comprused = 0;
          while ($comprused < $comprtotlo) {
            read(STDIN, $data, 16) or die "Unable to read compressed file";
            my ($comprsizelo, $comprsizehi,
                $uncomsizelo, $uncomsizehi) = unpack("(LLLL)<", $data);
            push @chunks, $comprsizelo;
            $comprused += $comprsizelo;
          }
          foreach my $comprsize (@chunks) {
            read(STDIN, $data, $comprsize) or die "File read failed";
            my ($inflate, $status) = new Compress::Raw::Zlib::Inflate();
            my $output;
            $status = $inflate->inflate($data, $output, 1);
            if ($status != Z_STREAM_END) {
              die "Bad compressed stream; status: " . ($status);
            }
            if (length($data) != 0) {
              die "Unconsumed data in input"
            }
            print $output;
          }
        ' <"$modsrcdir/$f" >"$moddestdir/${f%.z}"
        touch -c -r "$modsrcdir/$f" "$moddestdir/${f%.z}"
        echo -ne "\r\\033[K"
      fi
    done

    perl -e '
      my $data;
      { local $/; $data = <STDIN>; }
      my $mapnamelen = unpack("@0 L<", $data);
      my $mapname = substr($data, 4, $mapnamelen - 1);
      $mapnamelen += 4;
      my $mapfilelen = unpack("@" . ($mapnamelen + 4) . " L<", $data);
      my $mapfile = substr($data, $mapnamelen + 8, $mapfilelen);
      print pack("L< L< L< Z8 L< C L< L<", $ARGV[0], 0, 8, "ModName", 1, 0, 1, $mapfilelen);
      print $mapfile;
      print "\x33\xFF\x22\xFF\x02\x00\x00\x00\x01";
    ' $modid <"$moddestdir/mod.info" >"${moddestdir}.mod"

    if [ -f "$moddestdir/modmeta.info" ]; then
      cat "$moddestdir/modmeta.info" >>"${moddestdir}.mod"
    else
      echo -ne '\x01\x00\x00\x00\x08\x00\x00\x00ModType\x00\x02\x00\x00\x001\x00' >>"${moddestdir}.mod"
    fi
    msg="Mod installed succesfully."
    output_msg
  else
   msg="ERROR: $modsrcdir/mod.info not found." && output_msg
  fi
 done
done
}

extract_mod
