#!/bin/bash
# # This script can be scheduled to run daily (or whatever) and validate all defined mods.
#   Then it will verify if the downloaded mods (after validation) contain updates and it will update if needed.
# # It will install/update all defined mods automatically.
# # If a mod updates it will output the result in console and also will put an entry into logs/IMPORTANT_NOTICE.txt
#   so you know if you want to restart your server(s).
# # In case you want to use it for different sets of mods or server clusters, just rename the modscript folder and setup
#   a different mods.conf with the other server paths and mod IDs. Make sure to set a good time apart in schedule because
#   steamcmd won't let it run a new process while the previous one still running.
# # Requires both moddownloader and modunpacker scripts to work.
# # Errors are logged unders logs dir.
# # You can either run with arguments: ./modchecker appid modid1,modid2,modid3 (etc...) or by setting up mods.conf.

# ---------- NO NEED TO EDIT BELOW -----------

# Getting the variables from modfunctions
scriptname="Mod Checker"
if [ ! -z "$*" ]; then
 appid=$(echo "$*" | tr -d '[:alpha:]' | awk '{print $1}')
 modid=( $(echo "$*" | sed "s/$appid //g" | tr -d '[:alpha:]') )
 . $(dirname "$0")/modfunctions "$scriptname" "$appid" "${modid[@]}"
else
 . $(dirname "$0")/modfunctions "$scriptname"
fi

# Function to get Mod's name
function get_modname {
 modname=$(curl -s -i -X POST -H "Content-Type:application/x-www-form-urlencoded" -d "itemcount=1" -d "publishedfileids[0]=${modid}" \
  'https://api.steampowered.com/ISteamRemoteStorage/GetPublishedFileDetails/v1/?format=xml' | grep "<title>" | sed -e 's/<title>//g' -e 's/<\/title>//g' | xargs)
 [ -z "$modname" ] && modname="N/A"
}

msg="Up and running..." && output_msg
echo

# Downloading/validating the mods
count=1
for i in "${modid[@]}"; do
 "${scriptpath}/moddownloader" "$scriptname" "$appid" "$i"
 online="${steaminstallation}/SteamApps/workshop/content/${appid}/${i}/WindowsNoEditor/mod.info"
 eval online${count}="$online"
 eval modid${count}="$i"
 let count=count+1
done

totalmodids=$count

# Comparing the downloaded mods with the installed and updating if needed
count=1
while [ $count -lt $totalmodids ]; do
 eval online=\$"online${count}"
 eval modid=\$"modid${count}"
 echo
 for s in "${server[@]}"; do
  installed="${s}/${modsdir}/${modid}/mod.info"
  [ -f "$installed" ] && comparemods=$(diff "$online" "$installed" 2>/dev/null)
  if [ ! -z "$comparemods" ] || [ ! -f "$installed" ]; then
   [ ! -f "$installed" ] && operation="new" || operation="updated"
   "${scriptpath}/modunpacker" "$scriptname" "server:${s}:" "$appid" "$modid"
   [ "$?" -ne 0 ] && msg="ERROR: Mod Unpacker failed to install Mod ID: $modid" && output_msg
   [ "$operation" = "updated" ] && \
    get_modname ; msg="NOTICE: Updated $modname Mod ID: $modid in server: ${s}. You might want to restart your server now!" && output_msg
  else
   get_modname ; msg="Mod: $modname is up to date in ${s}/${modsdir}/${modid}." && output_msg
  fi
 done
 let count=count+1
done

echo
msg="All Mod IDs and server(s) checked!" && output_msg
