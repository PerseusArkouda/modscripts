#!/bin/bash
# # This script is not meant to be used directly.
#   Contains shared functions for the rest of the scripts.


#-------- NO NEED TO EDIT ANYTHING --------

# Script's location and creation of logs dir if not exist
script=$(realpath "$0")
scriptpath=$(dirname "$script")
logs="${scriptpath}/logs"
[ ! -d "$logs" ] && mkdir "$logs"

function output_msg {
 grep ^ERROR <<<"$msg" &>/dev/null && echo "$(date) - [App ID: $appid] - $msg" >> "${logs}/$(awk '{sub(/ /,""); print tolower($0)}' <<<$scriptname)-errors.txt"
 grep ^NOTICE <<<"$msg" &>/dev/null && echo "$(date) - [App ID: $appid] - $msg" >> "${logs}/IMPORTANT_NOTICE.txt"
 echo -e "[${scriptname}] $msg"
}

# Check if arguments are given and priotirize them over mods.conf
scriptname="$1"
[ -z "$2" ] && [ -z "$3" ] && [ ! -f "${scriptpath}/mods.conf" ] && \
 msg="ERROR: You need to either pass arguments or setup the mods.conf. Exiting." && output_msg && exit 1
[ -z "$2" ] && [ ! -f "${scriptpath}/mods.conf" ] && \
 msg="ERROR: Syntax is wrong. App ID is missing. Exiting." && output_msg && exit 1
[ -z "$3" ] && [ ! -f "${scriptpath}/mods.conf" ] && \
 msg="ERROR: Syntax is wrong. Mod ID(s) is missing. Exiting." && output_msg && exit 1
[ ! -z "$2" ] && appid="$2"
[ ! -z "$3" ] && modid=( $(echo "$*" | sed -e "s/$appid //g" -e "s/,/ /g" | tr -d '[:alpha:]') )
conf="${scriptpath}/mods.conf"
if [ -z "$2" ] && [ -f "$conf" ]; then
 eval steaminstallation=$(grep "^steaminstallation" "$conf" | grep -v "#" | cut -d "=" -f 2)
 appid=$(grep "^appid" "$conf" | cut -d "=" -f 2)
 modid=( $(grep "^modid" "$conf" | cut -d "=" -f 2 | sed 's/,/ /g') )
 eval server=( $(grep "^server" "$conf" | cut -d "=" -f 2 | sed "s/,/ /g") )
 steamcmd=$(grep "^steamcmd" "$conf" | cut -d "=" -f 2)
fi
[ -z "$steamcmd" ] && [ -f "$conf" ] && eval steamcmd=$(grep "^steamcmd" "$conf" | cut -d "=" -f 2)
[ -z "$steaminstallation" ] && [ -f "$conf" ] && eval steaminstallation=$(grep "^steaminstallation" "$conf" | grep -v "#" | cut -d "=" -f 2)
[ -z "$server" ] && [ -f "$conf" ] && eval server=( $(grep "^server" "$conf" | cut -d "=" -f 2) )

modname=$(curl -s -i -X POST -H "Content-Type:application/x-www-form-urlencoded" -d "itemcount=1" -d "publishedfileids[0]=${modid}" \
 'https://api.steampowered.com/ISteamRemoteStorage/GetPublishedFileDetails/v1/?format=xml' | grep "<title>" | sed -e 's/<title>//g' -e 's/<\/title>//g' | xargs)
[ -z "$modname" ] && modname="N/A"

# Error handling
[ -z "$appid" ] && msg="ERROR: App ID is not set. Exiting." && output_msg && exit 1
[ "$scriptname" != "Mod Checker" ] && [ "$scriptname" != "Mod Downloader" ] && [ -z "$server" ] && msg="ERROR: Server(s) path is not set. Exiting." && output_msg && exit 1
[ -z "$server" ] && msg="ERROR: Mod ID(s) is not set. Exiting." && output_msg && exit 1
[ "$scriptname" != "Mod Checker" ] && [ "$scriptname" = "Mod Downloader" ] && [ -z "$steamcmd" ] && msg="ERROR: steamcmd path is not set. Exiting." && output_msg && exit 1
[ "$scriptname" != "Mod Checker" ] && [ -z "$steaminstallation" ] && msg="ERROR: Steam installation path is not set. Exiting." && output_msg && exit 1
[ "$scriptname" = "Mod Checker" ] && [ ! -f "${scriptpath}/moddownloader" ] && msg="ERROR: moddownloader script now found. Exiting." && output_msg && exit 1
[ "$scriptname" = "Mod Checker" ] && [ ! -f "${scriptpath}/modunpacker" ] && msg="ERROR: modunpacker script now found. Exiting." && output_msg && exit 1

# Uncomment to debug
#msg="Steam installation: $steaminstallation \nSteamcmd: $steamcmd \nApp ID: $appid \nServers: ${server[@]} \nMod IDs: ${modid[@]}" && output_msg
